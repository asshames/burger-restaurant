{"ast":null,"code":"var _jsxFileName = \"/home/shames/Desktop/burger-restaurant/src/containers/UserInformation/UserInfo.js\";\nimport React, { Component } from 'react';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './UserInfo.module.css';\nimport Input from '../../components/UI/Input/Input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass UserInfo extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      userInfo: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true,\n            maxChar: 32\n          },\n          valid: false,\n          touched: false\n        },\n        number: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'number',\n            placeholder: 'Your Phone Number'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 11,\n            maxLength: 13\n          },\n          valid: false,\n          touched: false\n        }\n      }\n    };\n\n    this.continueHandler = () => {\n      this.props.history.push('/');\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedUserInfo = { ...this.state.userInfo\n      };\n      const updatedFormElement = { ...updatedUserInfo[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedUserInfo[inputIdentifier] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedUserInfo) {\n        formIsValid = updatedUserInfo[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        userInfo: updatedUserInfo,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules) return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.userInfo) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.userInfo[key]\n      });\n    }\n\n    let form = /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.continueHandler,\n      children: [formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        invalid: !formElement.config.valid,\n        shouldValidate: formElement.config.validation,\n        touched: formElement.config.touched,\n        changed: event => this.inputChangedHandler(event, formElement.id)\n      }, formElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(Button, {\n        btnType: \"Success\",\n        disabled: !this.state.formIsValid,\n        children: \"CONTINUE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.UserInfo,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Please enter your information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), form]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default UserInfo;","map":{"version":3,"names":["React","Component","Button","classes","Input","UserInfo","state","userInfo","name","elementType","elementConfig","type","placeholder","value","validation","required","maxChar","valid","touched","number","minLength","maxLength","continueHandler","props","history","push","inputChangedHandler","event","inputIdentifier","updatedUserInfo","updatedFormElement","target","checkValidity","formIsValid","setState","rules","isValid","trim","length","render","formElementsArray","key","id","config","form","map","formElement"],"sources":["/home/shames/Desktop/burger-restaurant/src/containers/UserInformation/UserInfo.js"],"sourcesContent":["import React, { Component } from 'react';\n\nimport Button from '../../components/UI/Button/Button';\nimport classes from './UserInfo.module.css';\nimport Input from '../../components/UI/Input/Input';\n\nclass UserInfo extends Component {\n    state = {\n        userInfo: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    maxChar: 32\n                },\n                valid: false,\n                touched: false\n            },\n            number: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'number',\n                    placeholder: 'Your Phone Number'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 11,\n                    maxLength: 13\n                },\n                valid: false, \n                touched: false\n            }\n        }\n    }\n\n\n    checkValidity(value, rules) {\n\n        let isValid = true;\n\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n        \n        if(rules)\n\n        return isValid;\n    }\n\n\n    continueHandler = () => {\n        this.props.history.push('/');\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedUserInfo = {\n            ...this.state.userInfo\n        };\n        const updatedFormElement = { \n            ...updatedUserInfo[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedUserInfo[inputIdentifier] = updatedFormElement;\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedUserInfo) {\n            formIsValid = updatedUserInfo[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({userInfo: updatedUserInfo, formIsValid: formIsValid});\n    }\n\n    render () {\n        const formElementsArray = [];\n        for (let key in this.state.userInfo) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.userInfo[key]\n            });\n        }\n        let form = (\n            <form onSubmit={this.continueHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>CONTINUE</Button>\n            </form>\n        )\n        return (\n            <div className={classes.UserInfo}>\n                <h4>Please enter your information</h4>\n                {/* <form>\n                    <Input elementType=\"input\" type=\"text\" name=\"name\" placeholder=\"Your Name\" />\n                    <Input elementType=\"input\" type=\"text\" name=\"number\" placeholder=\"Your Phone Number\" />\n                    <Button btnType=\"Success\" clicked={this.continueHandler}>CONTINUE</Button>\n                </form> */}\n                {form}\n            </div>\n        );\n    }\n}\n\nexport default UserInfo;"],"mappings":"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"},"metadata":{},"sourceType":"module"}